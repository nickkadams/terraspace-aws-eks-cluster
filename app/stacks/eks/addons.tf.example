################################################################################
# VPC CNI IAM Role
################################################################################

resource "aws_iam_role" "vpc_cni" {
  name        = "vpc-cni-${local.name}"
  description = "VPC CNI IAM role"

  assume_role_policy    = data.aws_iam_policy_document.vpc_cni_assume_role.json
  force_detach_policies = true
}

data "aws_iam_policy_document" "vpc_cni_assume_role" {
  statement {
    actions = ["sts:AssumeRoleWithWebIdentity"]

    principals {
      type        = "Federated"
      identifiers = [module.eks.oidc_provider_arn]
    }

    condition {
      test     = "StringEquals"
      variable = "${module.eks.oidc_provider}:aud"
      values   = ["sts.amazonaws.com"]
    }

    condition {
      test     = "StringEquals"
      variable = "${module.eks.oidc_provider}:sub"
      values   = ["system:serviceaccount:kube-system:aws-node"]
    }
  }
}

resource "aws_iam_role_policy_attachment" "vpc_cni" {
  role       = aws_iam_role.vpc_cni.name
  policy_arn = "arn:${data.aws_partition.current.partition}:iam::aws:policy/AmazonEKS_CNI_Policy"
}

################################################################################
# EBS CSI Driver IAM Role
################################################################################

resource "aws_iam_role" "ebs_csi" {
  name        = "ebs-csi-driver-${local.name}"
  description = "EBS CSI Driver IAM role"

  assume_role_policy    = data.aws_iam_policy_document.ebs_csi_assume_role.json
  force_detach_policies = true
}

data "aws_iam_policy_document" "ebs_csi_assume_role" {
  statement {
    actions = ["sts:AssumeRoleWithWebIdentity"]

    principals {
      type        = "Federated"
      identifiers = [module.eks.oidc_provider_arn]
    }

    condition {
      test     = "StringEquals"
      variable = "${module.eks.oidc_provider}:aud"
      values   = ["sts.amazonaws.com"]
    }

    condition {
      test     = "StringEquals"
      variable = "${module.eks.oidc_provider}:sub"
      values   = ["system:serviceaccount:kube-system:aws-node"]
    }
  }
}

resource "aws_iam_role_policy_attachment" "ebs_csi" {
  role       = aws_iam_role.ebs_csi.name
  policy_arn = "arn:${data.aws_partition.current.partition}:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy"
}

module "eks_blueprints_addons" {
  source = "../../modules/eks_blueprints_addons"

  cluster_name      = module.eks.cluster_name
  cluster_endpoint  = module.eks.cluster_endpoint
  cluster_version   = module.eks.cluster_version
  oidc_provider_arn = module.eks.oidc_provider_arn

  eks_addons = {
    aws-ebs-csi-driver = {
      before_compute           = true
      most_recent              = true
      service_account_role_arn = aws_iam_role.ebs_csi.arn
    }
    vpc-cni = {
      before_compute           = true
      most_recent              = true
      service_account_role_arn = aws_iam_role.vpc_cni.arn
      configuration_values = jsonencode({
        env = {
          ENABLE_PREFIX_DELEGATION = "true"
          WARM_PREFIX_TARGET       = "1"
        }
      })
    }
  }

  # enable_karpenter = true
  # karpenter_node = {
  #   iam_role_use_name_prefix = false
  #   iam_role_description     = "Karpenter node IAM role"
  # }

  # enable_kube_prometheus_stack = true
  # enable_metrics_server        = true
}

# resource "kubectl_manifest" "eni_config" {
#   for_each = zipmap(var.azs, var.pod_subnets) # var.private_subnets

#   yaml_body = yamlencode({
#     apiVersion = "crd.k8s.amazonaws.com/v1alpha1"
#     kind       = "ENIConfig"
#     metadata = {
#       name = each.key
#     }
#     spec = {
#       securityGroups = [
#         module.eks.node_security_group_id,
#       ]
#       subnet = each.value
#     }
#   })
# }
